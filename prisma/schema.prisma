generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  firstName       String
  lastName        String
  otherName       String?
  gender          String
  enrolledCourses StudentCourse[]
  feePayments     FeePayment[]
  parents         Parent[]
  classId    Int
  class      Class     @relation(fields: [classId], references: [id])

  @@map("students")
}

model Parent {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  firstName  String
  lastName   String
  otherName  String?
  gender     String
  email      String    @unique
  password   String
  students   Student[]

  @@map("parents")
}

model Teacher {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  email      String         @unique
  password   String
  firstName  String
  lastName   String
  otherName  String?
  gender     String
  courses    TeacherCourse[]

  @@map("teachers")
}

model Class {
  id             Int            @id @default(autoincrement())
  name           String
  classTeacher   String
  classPrefect   String
  pictureUrl     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  students       Student[]
  academicTerm   AcademicTerm?  @relation(fields: [academicTermId], references: [id])
  academicTermId Int?
  courseClasses  CourseClass[]

  @@map("classes")
}

model Course {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  students      StudentCourse[]
  teachers      TeacherCourse[]
  classes       CourseClass[]

  @@map("courses")
}

model StudentCourse {
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int

  @@id([studentId, courseId])
  @@map("student_courses")
}

model TeacherCourse {
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int

  @@id([teacherId, courseId])
  @@map("teacher_courses")
}

model CourseClass {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  class    Class  @relation(fields: [classId], references: [id])
  classId  Int

  @@id([courseId, classId])
  @@map("course_classes")
}

model AcademicTerm {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  classes   Class[]

  @@map("academic_terms")
}

model FeePayment {
  id              Int      @id @default(autoincrement())
  amount          Float
  paymentMode     String
  confirmationCode String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  studentId       Int
  student         Student  @relation(fields: [studentId], references: [id])

  @@map("fee_payments")
}
