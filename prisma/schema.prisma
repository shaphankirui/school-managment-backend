generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                     Int                @id @default(autoincrement())
  admisionNumber         Int                @default(autoincrement())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  firstName              String
  lastName               String
  otherName              String?
  feeBalance             Float?             @default(0)
  emergencyContactNumber String
  gender                 String
  enrolledCourses        StudentCourse[]
  feePayments            FeePayment[]
  results                Score[]
  feeBalanceEnd          FeeBalanceRecord[]
  classId                Int
  class                  Class              @relation(fields: [classId], references: [id])
  parentId               Int
  parent                 Parent             @relation(fields: [parentId], references: [id])

  @@map("students")
}

model Parent {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String
  lastName  String
  otherName String?
  gender    String
  email     String    @unique
  password  String
  students  Student[]

  @@map("parents")
}

model Teacher {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  email           String          @unique
  password        String
  firstName       String
  lastName        String
  otherName       String?
  phone           String?
  bankName        String?
  accountNumber   String?
  is_bom          Boolean
  salaryAmount    Float?          @default(0)
  salaryBalance   Float?          @default(0)
  RemidialBalance Float?          @default(0)
  TotalBance      Float?          @default(0)
  gender          String
  courses         TeacherCourse[]
  exam            Exam[]

  @@map("teachers")
}

model Class {
  id             Int           @id @default(autoincrement())
  name           String
  classTeacher   String
  classPrefect   String
  pictureUrl     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  students       Student[]
  academicTerm   AcademicTerm? @relation(fields: [academicTermId], references: [id])
  academicTermId Int?
  courseClasses  CourseClass[]
  exam           Exam[]

  @@map("classes")
}

model Course {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  students      StudentCourse[]
  teachers      TeacherCourse[]
  classes       CourseClass[]
  exam          Exam[]
  GradingSystem GradingSystem[]

  @@map("courses")
}

model StudentCourse {
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int

  @@id([studentId, courseId])
  @@map("student_courses")
}

model TeacherCourse {
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int

  @@id([teacherId, courseId])
  @@map("teacher_courses")
}

model CourseClass {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  class    Class  @relation(fields: [classId], references: [id])
  classId  Int

  @@id([courseId, classId])
  @@map("course_classes")
}

model AcademicTerm {
  id            Int                @id @default(autoincrement())
  name          String
  startDate     DateTime
  endDate       DateTime
  is_open       Boolean            @default(true)
  feeAmount     Float
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  classes       Class[]
  exam          Exam[]
  feeBalanceEnd FeeBalanceRecord[]

  @@map("academic_terms")
}

model FeePayment {
  id               Int      @id @default(autoincrement())
  amount           Float
  paymentMode      String
  confirmationCode String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  studentId        Int
  student          Student  @relation(fields: [studentId], references: [id])

  @@map("fee_payments")
}

model Management {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  otherName String?
  email     String   @unique
  password  String
  role      String
}

model Exam {
  id              Int      @id @default(autoincrement())
  name            String
  date            DateTime
  courseId        Int
  teacherId       Int
  classId         Int
  accademicTermId Int
  outOf           Int
  passMark        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  results Score[]

  course  Course       @relation(fields: [courseId], references: [id])
  teacher Teacher      @relation(fields: [teacherId], references: [id])
  class   Class        @relation(fields: [classId], references: [id])
  term    AcademicTerm @relation(fields: [accademicTermId], references: [id])

  @@map("exams")
}

model Score {
  id        Int      @id @default(autoincrement())
  score     Float // Or whatever type you need
  examId    Int
  studentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exam    Exam    @relation(fields: [examId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@map("scores")
}

model FeeBalanceRecord {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    Student  @relation(fields: [studentId], references: [id])
  feeBalance Float
  recordedAt DateTime @default(now())

  academicTerm   AcademicTerm @relation(fields: [academicTermId], references: [id])
  academicTermId Int
}

model GradingSystem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  gradeRanges Json // Define the structure to store grade ranges and points
}
